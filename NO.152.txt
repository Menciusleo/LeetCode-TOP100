Maximum Product Subarray

难度：medium
题意：给了一个数组，找出最大的子数组的乘积
解题思路：首先，对于一个不含0的数组，如何找到最大的子数组之积。可以肯定的是，如果从第一个元素开始累乘，积的绝对值绝对是递增的，因此影响最大值的，只有负数，导致整个积取负。事实上，这个最大的积一定是从最左侧或者从最右侧开始累乘的，不可能是中间的某一段的乘积。
证明，可以假定最大的乘积为ai~aj。ij都不是左右边界，此时，如果ai-1或者aj+1有一个非负，例如aj+1非负，则ai~aj+1的积大于等于ai~aj。若ai-1或者aj+1均为负，则ai-1~aj+1的积大于等于ai~aj之积。弄清楚这一点，可以按0划分成子数组，然后取最大积。

code：

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int pos=INT_MIN;
        int pro=1;
        int last=0;
        for(int i=0;i<=nums.size();i++)
        {
            if(i!=nums.size() && nums[i]!=0)
            {
                pro*=nums[i];
                if(pro>pos)
                {
                    pos=pro;
                }
            }
            else if(i==nums.size())
            {
                int j=last;
                while(pro<0 && j<i-1)
                {
                    pro/=nums[j];
                    if(pro>pos)
                    {
                        pos=pro;
                    }
                    j++;
                }
                
                pro=1;
                last=i+1;
            }
            else
            {
                if(pos<0)pos=0;
                int j=last;
                while(pro<0 && j<i-1)
                {
                    pro/=nums[j];
                    if(pro>pos)
                    {
                        pos=pro;
                    }
                    j++;
                }
                
                pro=1;
                last=i+1;
            }
        }
        return pos;
    }
};

结果：
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Maximum Product Subarray.
Memory Usage: 9.1 MB, less than 85.00% of C++ online submissions for Maximum Product Subarray.