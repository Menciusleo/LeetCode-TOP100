Add Digits
难度：easy
题意：将输出整数的各位相加，直至结果为一个0-9的数
解题思路：通过取余，取商操作，逐位相加，直至得出最终结果

code：

class Solution {
public:
    int addDigits(int num) {
        if(num<10)return num;
        int sum=0;
        while(num!=0)
        {
            sum+=num%10;
            num/=10;
        }
        return addDigits(sum);
    }
};

以下是大佬的解法：by zhiqing_xiao https://leetcode.com/zhiqing_xiao/
引入了digital root的概念，做到了常数级时间空间复杂度。
The problem, widely known as digit root problem, has a congruence formula:

https://en.wikipedia.org/wiki/Digital_root#Congruence_formula
For base b (decimal case b = 10), the digit root of an integer is:

dr(n) = 0 if n == 0
dr(n) = (b-1) if n != 0 and n % (b-1) == 0
dr(n) = n mod (b-1) if n % (b-1) != 0
or

dr(n) = 1 + (n - 1) % 9
Note here, when n = 0, since (n - 1) % 9 = -1, the return value is zero (correct).

From the formula, we can find that the result of this problem is immanently periodic, with period (b-1).

Output sequence for decimals (b = 10):

~input: 0 1 2 3 4 ...
output: 0 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 ....

Henceforth, we can write the following code, whose time and space complexities are both O(1).

class Solution {
public:
    int addDigits(int num) {
        return 1 + (num - 1) % 9;
    }
};
Thanks for reading. :)
