Word Search

难度：medium
题意：从一个二维数组中，能否找出所给的word。
board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.
解题思路：DFS的思想，首先遍历数组，找出与word[0]相同的元素，然后在这些元素处做DFS。

code：

class Solution {
public:
	vector<vector<int>> move{ {-1,0},{0,-1},{1,0},{0,1} };

	bool exist(vector<vector<char>>& board, string word) {
		bool res=false;
		int row = board.size();
		int col = board[0].size();

		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				if (board[i][j] == word[0])
				{
					res=dfs(i, j, board, word, 0);
					if (res)return true;
				}
			}
		}
		return false;
	}

	bool dfs(int i, int j, vector<vector<char>>& board, string& word, int ptr)
	{
		if (ptr == word.size())
		{
			return true;
		}
        if(i<0||j<0||i>=board.size()||j>=board[0].size()||board[i][j]=='\0'||board[i][j]!=word[ptr])return false;
		char temp=board[i][j];
        board[i][j]='\0';
		bool res=dfs(i+1, j, board, word, ptr + 1)||dfs(i-1, j, board, word, ptr + 1)||dfs(i, j+1, board, word, ptr + 1)||dfs(i, j-1, board, word, ptr + 1);
        board[i][j]=temp;
        return res;
	}
};

结果：
Runtime: 24 ms, faster than 84.90% of C++ online submissions for Word Search.
Memory Usage: 10.1 MB, less than 97.06% of C++ online submissions for Word Search.